import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Import des modules personnalis√©s
from data_loader import get_processed_data
from model import train_model
from prediction import predict_with_teams
from styles import get_css

# Configuration de la page
st.set_page_config(page_title="Pr√©diction Ligue 1", layout="wide")

# Application du CSS
st.markdown(get_css(), unsafe_allow_html=True)

# Titre principal
st.markdown("<h1 class='main-header'>Pr√©diction des R√©sultats de Matchs de Ligue 1</h1>", unsafe_allow_html=True)

# Barre lat√©rale pour les options
st.sidebar.title("Options")

advanced_mode = st.sidebar.checkbox("Mode avanc√©", value=False)

use_advanced_features = st.sidebar.checkbox("Utiliser des caract√©ristiques avanc√©es", value=True)
selected_model = st.sidebar.selectbox(
    "Choisir un algorithme",
    ["Random Forest", "SVM"]
)

st.sidebar.markdown("### Param√®tres de r√©gularisation")
st.sidebar.markdown("üëâ _Une r√©gularisation plus forte (valeurs plus √©lev√©es) r√©duit le surapprentissage_")

max_reg = 10.0
regularization = st.sidebar.slider("Force de r√©gularisation", 0.01, max_reg, 10.0, 0.1)

max_depth = None
if selected_model == "Random Forest":
    max_depth = st.sidebar.slider(f"Profondeur max des arbres ({selected_model})", 
                                 3, 20, 3)

use_cv = False
n_folds = 5
if advanced_mode:
    st.sidebar.markdown("### Validation crois√©e")
    use_cv = st.sidebar.checkbox("Utiliser la validation crois√©e", value=False,
                               help="√âvalue le mod√®le sur plusieurs partitions des donn√©es pour une estimation plus fiable")
    if use_cv:
        n_folds = st.sidebar.slider("Nombre de partitions", 3, 10, 5,
                                 help="Plus de partitions = √©valuation plus robuste mais plus lente")

# Chargement et pr√©traitement des donn√©es
df, teams, default_features, advanced_features = get_processed_data()

with st.expander("Informations sur le dataset"):
    st.write(f"Nombre total de matchs: {len(df)}")
    st.write(f"P√©riode couverte: {df['Date'].min().strftime('%d/%m/%Y')} - {df['Date'].max().strftime('%d/%m/%Y')}")
    
    if 'FTR' in df.columns:
        result_counts = df['FTR'].value_counts()
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(x=result_counts.index, y=result_counts.values, ax=ax)
        ax.set_title('Distribution des r√©sultats')
        ax.set_xlabel('R√©sultat')
        ax.set_ylabel('Nombre de matchs')
        st.pyplot(fig)

# S√©lection des caract√©ristiques
if use_advanced_features and advanced_features:
    selected_features = default_features + advanced_features
    st.info(f"Utilisation de {len(selected_features)} caract√©ristiques pour le mod√®le")
else:
    selected_features = default_features
    st.info("Utilisation des cotes uniquement pour le mod√®le")

# Entra√Ænement du mod√®le
model, scaler, label_encoder, accuracy, conf_matrix, class_report, X_test, y_test, feature_importance, cv_results = train_model(
    df, selected_features, selected_model, regularization, max_depth, use_cv, n_folds, advanced_mode
)

# Affichage des performances du mod√®le
st.markdown("<h2 class='sub-header'>Performance du mod√®le</h2>", unsafe_allow_html=True)

col1, col2 = st.columns(2)
with col1:
    if cv_results:
        st.metric("Pr√©cision du mod√®le (test)", f"{accuracy:.2f}")
        st.metric("Pr√©cision validation crois√©e", f"{cv_results['mean']:.2f} ¬± {cv_results['std']:.2f}")
        
        fig, ax = plt.subplots(figsize=(8, 4))
        ax.bar(range(1, len(cv_results['scores'])+1), cv_results['scores'])
        ax.axhline(y=cv_results['mean'], color='r', linestyle='-', label=f"Moyenne: {cv_results['mean']:.2f}")
        ax.set_xlabel('Fold')
        ax.set_ylabel('Pr√©cision')
        ax.set_title('R√©sultats de la validation crois√©e')
        ax.legend()
        st.pyplot(fig)
    else:
        st.metric("Pr√©cision du mod√®le", f"{accuracy:.2f}")
    
    if accuracy > 0.95:
        st.warning("‚ö†Ô∏è La pr√©cision est anormalement √©lev√©e, ce qui sugg√®re un surapprentissage. Le mod√®le ne sera probablement pas aussi performant sur de nouvelles donn√©es. Essayez d'augmenter la r√©gularisation ou d'utiliser moins de caract√©ristiques.")
        
        if selected_model == "R√©gression Logistique":
            st.error("‚öôÔ∏è La r√©gression logistique montre un fort surapprentissage m√™me avec r√©gularisation=10. Essayez d'activer le mode avanc√© et utilisez le penalty 'elasticnet'.")
        elif selected_model == "Gradient Boosting":
            st.error("‚öôÔ∏è Le Gradient Boosting montre un fort surapprentissage m√™me avec regularization=10 et max_depth=3. Activez le mode avanc√© pour utiliser des techniques suppl√©mentaires.")
    elif accuracy > 0.75:
        st.success("‚úÖ Bonne pr√©cision ! Un mod√®le avec une pr√©cision autour de 0.75-0.85 est g√©n√©ralement fiable pour les pr√©dictions sportives.")
    elif accuracy > 0.55:
        st.info("‚ÑπÔ∏è Pr√©cision mod√©r√©e. Pour les pr√©dictions sportives, c'est souvent un indicateur r√©aliste.")
    else:
        st.error("‚ùå Pr√©cision faible. Essayez d'autres combinaisons de caract√©ristiques ou d'autres algorithmes.")
    
    fig, ax = plt.subplots(figsize=(8, 6))
    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', 
                xticklabels=['Domicile (H)', 'Nul (D)', 'Ext√©rieur (A)'],
                yticklabels=['Domicile (H)', 'Nul (D)', 'Ext√©rieur (A)'], ax=ax)
    ax.set_xlabel('Pr√©diction')
    ax.set_ylabel('Valeur r√©elle')
    ax.set_title('Matrice de confusion')
    st.pyplot(fig)

with col2:
    st.write("Rapport de classification:")
    report_df = pd.DataFrame(class_report).transpose()
    st.dataframe(report_df.style.format({"precision": "{:.2f}", "recall": "{:.2f}", "f1-score": "{:.2f}", "support": "{:.0f}"}))
    
    if feature_importance:
        st.write("Importance des caract√©ristiques:")
        sorted_features = sorted(feature_importance.items(), key=lambda x: x[1], reverse=True)
        importance_df = pd.DataFrame(sorted_features, columns=['Caract√©ristique', 'Importance'])
        
        importance_df['Importance'] = importance_df['Importance'] / importance_df['Importance'].sum()
        
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(x='Importance', y='Caract√©ristique', data=importance_df, ax=ax)
        ax.set_title('Importance relative des caract√©ristiques')
        ax.set_xlabel('Importance normalis√©e')
        st.pyplot(fig)
        
        if len(importance_df) > 0:
            st.markdown(f"**Caract√©ristique la plus importante:** `{importance_df.iloc[0]['Caract√©ristique']}`")
            
            if 'B365' in importance_df.iloc[0]['Caract√©ristique']:
                st.markdown("_Les cotes des bookmakers sont g√©n√©ralement d'excellents pr√©dicteurs car elles int√®grent d√©j√† beaucoup d'informations._")

# Section de pr√©diction avec les cotes
st.markdown("<h2 class='sub-header'>Pr√©diction pour un match</h2>", unsafe_allow_html=True)

if st.checkbox("Pr√©dire avec les cotes"):
    col1, col2, col3 = st.columns(3)
    with col1:
        b365h = st.number_input("Cote Victoire Domicile", value=2.0, step=0.1)
    with col2:
        b365d = st.number_input("Cote Match Nul", value=3.0, step=0.1)
    with col3:
        b365a = st.number_input("Cote Victoire Ext√©rieur", value=3.5, step=0.1)
    
    input_data = [b365h, b365d, b365a]
    feature_names = ['B365H', 'B365D', 'B365A']
    
    if use_advanced_features and advanced_features:
        for feature in advanced_features:
            val = st.slider(f"Valeur pour {feature}", 0, 20, 5)
            input_data.append(val)
            feature_names.append(feature)
    
    input_array = np.array([input_data])
    
    if st.button("Pr√©dire le r√©sultat (cotes)"):
        scaled_input = scaler.transform(input_array)
        
        prediction_proba = model.predict_proba(scaled_input)[0]
        prediction = model.predict(scaled_input)[0]
        result = label_encoder.inverse_transform([prediction])[0]
        
        result_texts = {
            'H': ("Victoire de l'√©quipe √† domicile", "win"),
            'D': ("Match nul", "draw"),
            'A': ("Victoire de l'√©quipe √† l'ext√©rieur", "loss")
        }
        
        result_text, result_class = result_texts[result]
        
        st.markdown(f"<div class='result-box {result_class}'>{result_text} ({result})</div>", unsafe_allow_html=True)
        
        st.write("Probabilit√©s pr√©dites:")
        proba_df = pd.DataFrame({
            'R√©sultat': ['Victoire domicile (H)', 'Match nul (D)', 'Victoire ext√©rieur (A)'],
            'Probabilit√©': prediction_proba
        })
        
        fig, ax = plt.subplots(figsize=(10, 5))
        sns.barplot(x='R√©sultat', y='Probabilit√©', data=proba_df, ax=ax)
        ax.set_ylim(0, 1)
        for i, p in enumerate(prediction_proba):
            ax.annotate(f'{p:.2f}', (i, p), ha='center', va='bottom')
        st.pyplot(fig)

# Section de pr√©diction avec les √©quipes
st.markdown("### Ou s√©lectionnez les √©quipes")
col1, col2 = st.columns(2)
with col1:
    home_team = st.selectbox("√âquipe √† domicile", teams)
with col2:
    away_team = st.selectbox("√âquipe √† l'ext√©rieur", teams, index=1 if len(teams) > 1 else 0)

if st.button("Pr√©dire le r√©sultat (√©quipes)"):
    try:
        with st.spinner("Analyse des performances des √©quipes..."):
            predicted_result, probabilities, stats = predict_with_teams(df, home_team, away_team)
            
            result_texts = {
                'H': (f"Victoire de {home_team}", "win"),
                'D': ("Match nul", "draw"),
                'A': (f"Victoire de {away_team}", "loss")
            }
            
            result_text, result_class = result_texts[predicted_result]
            
            st.markdown(f"<div class='result-box {result_class}'>{result_text} ({predicted_result})</div>", unsafe_allow_html=True)
            
            st.write("Probabilit√©s pr√©dites:")
            proba_df = pd.DataFrame({
                'R√©sultat': [f'Victoire {home_team} (H)', 'Match nul (D)', f'Victoire {away_team} (A)'],
                'Probabilit√©': probabilities
            })
            
            fig, ax = plt.subplots(figsize=(10, 5))
            sns.barplot(x='R√©sultat', y='Probabilit√©', data=proba_df, ax=ax)
            ax.set_ylim(0, 1)
            for i, p in enumerate(probabilities):
                ax.annotate(f'{p:.2f}', (i, p), ha='center', va='bottom')
            st.pyplot(fig)
            
            with st.expander("D√©tails des statistiques utilis√©es"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader(f"Statistiques de {home_team}")
                    st.write(f"Matchs jou√©s √† domicile: {stats['home_stats']['matches_played']}")
                    st.write(f"Victoires: {stats['home_stats']['wins']}")
                    st.write(f"Nuls: {stats['home_stats']['draws']}")
                    st.write(f"D√©faites: {stats['home_stats']['losses']}")
                    st.write(f"Forme r√©cente (0-3): {stats['home_form']:.2f}")
                
                with col2:
                    st.subheader(f"Statistiques de {away_team}")
                    st.write(f"Matchs jou√©s √† l'ext√©rieur: {stats['away_stats']['matches_played']}")
                    st.write(f"Victoires: {stats['away_stats']['wins']}")
                    st.write(f"Nuls: {stats['away_stats']['draws']}")
                    st.write(f"D√©faites: {stats['away_stats']['losses']}")
                    st.write(f"Forme r√©cente (0-3): {stats['away_form']:.2f}")
                
                st.subheader("Confrontations directes")
                st.write(f"Nombre de matchs: {stats['h2h_stats']['total_matches']}")
                st.write(f"Victoires {home_team}: {stats['h2h_stats']['home_team_wins']}")
                st.write(f"Victoires {away_team}: {stats['h2h_stats']['away_team_wins']}")
                st.write(f"Matchs nuls: {stats['h2h_stats']['draws']}")
    
    except Exception as e:
        st.error(f"Erreur lors de la pr√©diction: {e}")
        st.info("Les donn√©es historiques pourraient √™tre insuffisantes pour ces √©quipes. Essayez une autre paire d'√©quipes ou utilisez la pr√©diction bas√©e sur les cotes.")

st.markdown("---")
st.markdown("D√©velopp√© pour LiveCampus | 2025")
